@page "/configuracoes"
@using HydroMeasure.Hibrid.Shared.Model.Configuracao
@using HydroMeasure.Hibrid.Shared.Services
@using MudBlazor
@inject IConfiguracaoSistemaService ConfiguracaoSistemaService
@inject ISnackbar Snackbar

<PageTitle>Configurações do Sistema</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Configurações do Sistema</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }
    else if (configuracao == null)
    {
        <MudAlert Severity="Severity.Error">Não foi possível carregar as configurações.</MudAlert>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="CriarConfiguracaoPadrao" Class="mt-4">
            Criar Configuração Padrão
        </MudButton>
    }
    else
    {
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Geral">
                <MudForm @ref="form" @bind-IsValid="@success">
                    <MudGrid>
                        <MudItem xs="12" sm="6">
                            <MudSelect T="string" Label="Idioma" @bind-Value="configuracao.Idioma">
                                <MudSelectItem Value="@("pt-BR")">Português (Brasil)</MudSelectItem>
                                <MudSelectItem Value="@("en-US")">English (US)</MudSelectItem>
                                <MudSelectItem Value="@("es-ES")">Español</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudSelect T="string" Label="Tema" @bind-Value="configuracao.Tema">
                                <MudSelectItem Value="@("Padrão")">Padrão</MudSelectItem>
                                <MudSelectItem Value="@("Escuro")">Escuro</MudSelectItem>
                                <MudSelectItem Value="@("Claro")">Claro</MudSelectItem>
                                <MudSelectItem Value="@("Personalizado")">Personalizado</MudSelectItem>
                            </MudSelect>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudTabPanel>

            <MudTabPanel Text="Notificações">
                <MudGrid>
                    <MudItem xs="12" sm="4">
                        <MudSwitch @bind-Checked="configuracao.NotificacoesEmailHabilitadas" Color="Color.Primary" Label="Notificações por Email" />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudSwitch @bind-Checked="configuracao.NotificacoesSmsHabilitadas" Color="Color.Primary" Label="Notificações por SMS" />
                    </MudItem>
                    <MudItem xs="12" sm="4">
                        <MudSwitch @bind-Checked="configuracao.NotificacoesPushHabilitadas" Color="Color.Primary" Label="Notificações Push" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Segurança">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="configuracao.TentativasLoginMaximas" Label="Tentativas de Login Máximas" Min="1" Max="10" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="configuracao.TempoBloqueioConta" Label="Tempo de Bloqueio da Conta (minutos)" Min="5" Max="60" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Relatórios">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string" Label="Formato Padrão de Relatório" @bind-Value="configuracao.FormatoPadraoRelatorio">
                            <MudSelectItem Value="@("PDF")">PDF</MudSelectItem>
                            <MudSelectItem Value="@("Excel")">Excel</MudSelectItem>
                            <MudSelectItem Value="@("CSV")">CSV</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudSwitch @bind-Checked="configuracao.GerarRelatorioAutomatico" Color="Color.Primary" Label="Gerar Relatório Automático" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Medição">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="configuracao.LimiteConsumoAlerta" Label="Limite de Consumo para Alerta (m³)" Min="1" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="configuracao.IntervaloAlertaConsumo" Label="Intervalo de Alerta de Consumo (dias)" Min="1" Max="90" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Personalização Visual">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudColorPicker @bind-Text="configuracao.CorPrimariaPersonalizada" Label="Cor Primária" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudColorPicker @bind-Text="configuracao.CorSecundariaPersonalizada" Label="Cor Secundária" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>

            <MudTabPanel Text="Backup">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSwitch @bind-Checked="configuracao.BackupAutomaticoHabilitado" Color="Color.Primary" Label="Backup Automático Habilitado" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField @bind-Value="configuracao.FrequenciaBackup" Label="Frequência de Backup (dias)" Min="1" Max="30" />
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        </MudTabs>

        <div class="d-flex justify-end mt-4">
            <MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="ResetarConfiguracoes" Class="mr-2">
                Resetar Configurações
            </MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SalvarConfiguracoes" Disabled="@(!success)">
                Salvar Configurações
            </MudButton>
        </div>
    }
</MudContainer>

@code {
    private ConfiguracaoSistemaDto? configuracao;
    private bool isLoading = true;
    private bool success = false;
    private MudForm? form;

    protected override async Task OnInitializedAsync()
    {
        await CarregarConfiguracoes();
    }

    private async Task CarregarConfiguracoes()
    {
        isLoading = true;
        try
        {
            configuracao = await ConfiguracaoSistemaService.GetConfiguracaoSistemaAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar configurações: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CriarConfiguracaoPadrao()
    {
        isLoading = true;
        try
        {
            var command = new CreateConfiguracaoSistemaCommand();
            var result = await ConfiguracaoSistemaService.CreateConfiguracaoSistemaAsync(command);
            
            if (result.Success)
            {
                configuracao = result.Data;
                Snackbar.Add("Configurações padrão criadas com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Erro ao criar configurações: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao criar configurações: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SalvarConfiguracoes()
    {
        if (configuracao == null) return;

        isLoading = true;
        try
        {
            var command = new UpdateConfiguracaoSistemaCommand
            {
                Id = configuracao.Id,
                Idioma = configuracao.Idioma,
                Tema = configuracao.Tema,
                NotificacoesEmailHabilitadas = configuracao.NotificacoesEmailHabilitadas,
                NotificacoesSmsHabilitadas = configuracao.NotificacoesSmsHabilitadas,
                NotificacoesPushHabilitadas = configuracao.NotificacoesPushHabilitadas,
                TentativasLoginMaximas = configuracao.TentativasLoginMaximas,
                TempoBloqueioConta = configuracao.TempoBloqueioConta,
                FormatoPadraoRelatorio = configuracao.FormatoPadraoRelatorio,
                GerarRelatorioAutomatico = configuracao.GerarRelatorioAutomatico,
                LimiteConsumoAlerta = configuracao.LimiteConsumoAlerta,
                IntervaloAlertaConsumo = configuracao.IntervaloAlertaConsumo,
                CorPrimariaPersonalizada = configuracao.CorPrimariaPersonalizada,
                CorSecundariaPersonalizada = configuracao.CorSecundariaPersonalizada,
                BackupAutomaticoHabilitado = configuracao.BackupAutomaticoHabilitado,
                FrequenciaBackup = configuracao.FrequenciaBackup
            };

            var result = await ConfiguracaoSistemaService.UpdateConfiguracaoSistemaAsync(command);
            
            if (result.Success)
            {
                configuracao = result.Data;
                Snackbar.Add("Configurações salvas com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Erro ao salvar configurações: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar configurações: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ResetarConfiguracoes()
    {
        isLoading = true;
        try
        {
            var result = await ConfiguracaoSistemaService.ResetConfiguracaoSistemaAsync();
            
            if (result.Success)
            {
                await CarregarConfiguracoes();
                Snackbar.Add("Configurações resetadas com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Erro ao resetar configurações: {result.Message}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao resetar configurações: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }
} 