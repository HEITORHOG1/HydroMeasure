@page "/condominios/novo"
@page "/condominios/editar/{Id:guid}"
@using HydroMeasure.Hibrid.Shared.Model.Condominio
@using HydroMeasure.Hibrid.Shared.Services
@inject NavigationManager NavigationManager
@inject ICondominioService CondominioService
@inject ISnackbar Snackbar

<PageTitle>@pageTitle - HydroMeasure</PageTitle>

<MudBreadcrumbs Items="@breadcrumbs"></MudBreadcrumbs>

<MudContainer MaxWidth="MaxWidth.Large" Class="pa-4">
    <MudText Typo="Typo.h4" Class="mb-4">@pageTitle</MudText>

    @if (isLoading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else
    {
        <MudForm @ref="form" @bind-IsValid="@success">
            <MudCard Elevation="3">
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="model.Nome"
                                          Label="Nome do Condomínio"
                                          Required="true"
                                          RequiredError="Nome é obrigatório"
                                          MaxLength="200"
                                          Counter="200" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="model.CNPJ"
                                          Label="CNPJ"
                                          Mask="@(new PatternMask("00.000.000/0000-00"))"
                                          Validation="@ValidateCNPJ" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField @bind-Value="model.Endereco"
                                          Label="Endereço"
                                          Required="true"
                                          RequiredError="Endereço é obrigatório"
                                          MaxLength="500"
                                          Counter="500" />
                        </MudItem>

                        <MudItem xs="12" md="6">
                            <MudTextField @bind-Value="model.Sindico"
                                          Label="Nome do Síndico"
                                          MaxLength="200" />
                        </MudItem>

                        <MudItem xs="12" md="3">
                            <MudTextField @bind-Value="model.TelefoneSindico"
                                          Label="Telefone do Síndico"
                                          Mask="@(new PatternMask("(00) 00000-0000"))" />
                        </MudItem>

                        <MudItem xs="12" md="3">
                            <MudTextField @bind-Value="model.EmailSindico"
                                          Label="Email do Síndico"
                                          Validation="@ValidateEmail" />
                        </MudItem>

                        @if (Id != null)
                        {
                            <MudItem xs="12">
                                <MudSwitch @bind-Checked="model.Ativo"
                                           Label="Ativo"
                                           Color="Color.Primary" />
                            </MudItem>
                        }
                    </MudGrid>
                </MudCardContent>

                <MudCardActions>
                    <MudButton OnClick="@(() => NavigationManager.NavigateTo("/condominios"))"
                               Variant="Variant.Outlined"
                               Color="Color.Default"
                               Class="mr-2">
                        Cancelar
                    </MudButton>

                    <MudButton OnClick="@Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!success || isSaving)">
                        @if (isSaving)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Salvando</MudText>
                        }
                        else
                        {
                            <MudText>Salvar</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </MudCard>
        </MudForm>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid? Id { get; set; }

    private string pageTitle => Id == null ? "Novo Condomínio" : "Editar Condomínio";
    private List<BreadcrumbItem> breadcrumbs = new List<BreadcrumbItem>();

    private MudForm form;
    private bool success;
    private bool isLoading = false;
    private bool isSaving = false;

    // Modelo para o formulário
    private CondominioFormModel model = new CondominioFormModel();

    protected override async Task OnInitializedAsync()
    {
        UpdateBreadcrumbs();

        if (Id != null)
        {
            await LoadCondominio((Guid)Id);
        }
    }

    private void UpdateBreadcrumbs()
    {
        breadcrumbs = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("Dashboard", href: "/"),
            new BreadcrumbItem("Condomínios", href: "/condominios")
        };

        if (Id == null)
        {
            breadcrumbs.Add(new BreadcrumbItem("Novo", href: "/condominios/novo", disabled: true));
        }
        else
        {
            breadcrumbs.Add(new BreadcrumbItem("Editar", href: $"/condominios/editar/{Id}", disabled: true));
        }
    }

    private async Task LoadCondominio(Guid id)
    {
        isLoading = true;

        try
        {
            var condominio = await CondominioService.GetCondominioByIdAsync(id);

            if (condominio != null)
            {
                model = new CondominioFormModel
                {
                    Id = condominio.Id,
                    Nome = condominio.Nome,
                    Endereco = condominio.Endereco,
                    CNPJ = condominio.CNPJ,
                    Sindico = condominio.Sindico,
                    TelefoneSindico = condominio.TelefoneSindico,
                    EmailSindico = condominio.EmailSindico,
                    Ativo = condominio.Ativo
                };
            }
            else
            {
                Snackbar.Add("Condomínio não encontrado", Severity.Error);
                NavigationManager.NavigateTo("/condominios");
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar condomínio: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/condominios");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task Submit()
    {
        isSaving = true;

        try
        {
            if (Id == null)
            {
                // Create new condominium
                var createCommand = new CreateCondominioCommand
                {
                    Nome = model.Nome,
                    Endereco = model.Endereco,
                    CNPJ = model.CNPJ,
                    Sindico = model.Sindico,
                    TelefoneSindico = model.TelefoneSindico,
                    EmailSindico = model.EmailSindico
                };

                var result = await CondominioService.CreateCondominioAsync(createCommand);

                if (result.Success)
                {
                    Snackbar.Add("Condomínio criado com sucesso!", Severity.Success);
                    // Adicionamos StateHasChanged para garantir que a UI seja atualizada
                    StateHasChanged();
                    // Adicionamos um pequeno delay para garantir que a notificação seja exibida
                    await Task.Delay(500);
                    NavigationManager.NavigateTo("/condominios", forceLoad: true);
                }
                else
                {
                    Snackbar.Add(result.Message, Severity.Error);
                }
            }
            else
            {
                // Update existing condominium
                var updateCommand = new UpdateCondominioCommand
                {
                    Id = model.Id ?? Guid.Empty,
                    Nome = model.Nome,
                    Endereco = model.Endereco,
                    CNPJ = model.CNPJ,
                    Sindico = model.Sindico,
                    TelefoneSindico = model.TelefoneSindico,
                    EmailSindico = model.EmailSindico,
                    Ativo = model.Ativo
                };

                var result = await CondominioService.UpdateCondominioAsync(updateCommand.Id, updateCommand);

                if (result.Success)
                {
                    Snackbar.Add("Condomínio atualizado com sucesso!", Severity.Success);
                    // Adicionamos StateHasChanged para garantir que a UI seja atualizada
                    StateHasChanged();
                    // Adicionamos um pequeno delay para garantir que a notificação seja exibida
                    await Task.Delay(500);
                    NavigationManager.NavigateTo("/condominios", forceLoad: true);
                }
                else
                {
                    Snackbar.Add(result.Message, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar condomínio: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSaving = false;
        }
    }

    // Validação para CNPJ
    private string ValidateCNPJ(string cnpj)
    {
        if (string.IsNullOrWhiteSpace(cnpj))
            return null;

        // Remove formatação
        cnpj = new string(cnpj.Where(char.IsDigit).ToArray());

        if (cnpj.Length != 14)
            return "CNPJ deve conter 14 dígitos";

        // Validação de dígitos repetidos
        bool allDigitsEqual = true;
        for (int i = 1; i < cnpj.Length; i++)
        {
            if (cnpj[i] != cnpj[0])
            {
                allDigitsEqual = false;
                break;
            }
        }

        if (allDigitsEqual)
            return "CNPJ inválido";

        // Validação do primeiro dígito verificador
        int[] multiplier1 = new int[12] { 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        int sum = 0;

        for (int i = 0; i < 12; i++)
            sum += int.Parse(cnpj[i].ToString()) * multiplier1[i];

        int remainder = sum % 11;
        int digit1 = remainder < 2 ? 0 : 11 - remainder;

        if (int.Parse(cnpj[12].ToString()) != digit1)
            return "CNPJ inválido";

        // Validação do segundo dígito verificador
        int[] multiplier2 = new int[13] { 6, 5, 4, 3, 2, 9, 8, 7, 6, 5, 4, 3, 2 };
        sum = 0;

        for (int i = 0; i < 13; i++)
            sum += int.Parse(cnpj[i].ToString()) * multiplier2[i];

        remainder = sum % 11;
        int digit2 = remainder < 2 ? 0 : 11 - remainder;

        if (int.Parse(cnpj[13].ToString()) != digit2)
            return "CNPJ inválido";

        return null;
    }

    // Validação para Email
    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return null;

        var isValid = System.Text.RegularExpressions.Regex.IsMatch(email,
            @"^[^@\s]+@[^@\s]+\.[^@\s]+$");

        return isValid ? null : "Email inválido";
    }

    // Modelo para o formulário
    private class CondominioFormModel
    {
        public Guid? Id { get; set; }
        public string Nome { get; set; } = string.Empty;
        public string Endereco { get; set; } = string.Empty;
        public string? CNPJ { get; set; }
        public string? Sindico { get; set; }
        public string? TelefoneSindico { get; set; }
        public string? EmailSindico { get; set; }
        public bool Ativo { get; set; } = true;
    }
}